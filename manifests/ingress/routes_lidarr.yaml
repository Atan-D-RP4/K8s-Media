# =============================================================================
# Lidarr Ingress Routes - External Access to Music Collection Manager
# =============================================================================

# These IngressRoutes provide external web access to the Lidarr music
# collection management application through Traefik. They implement:
# - Automatic HTTPS redirects for security
# - SSL certificate management via Let's Encrypt
# - Security headers for enhanced protection
# - Multiple domain support (IP and custom domains)

# Lidarr provides a web interface for:
# 1. Managing music collection and library organization
# 2. Monitoring music release calendars and new releases
# 3. Configuring download clients and indexers
# 4. Setting up quality profiles and naming conventions
# 5. Monitoring download progress and history

# External access enables remote management of your music collection,
# allowing you to add new artists, monitor downloads, and configure
# settings from anywhere.

# Documentation:
# - Traefik IngressRoute: https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/
# - Lidarr: https://wiki.servarr.com/lidarr
# - Music Management: https://wiki.servarr.com/lidarr/library
# =============================================================================
# =============================================================================
# Lidarr HTTP Route - Automatic HTTPS Redirect
# =============================================================================
# This route handles all HTTP (port 80) traffic to Lidarr and redirects
# it to HTTPS for secure communication. This protects API keys and
# download client configurations from being transmitted in plain text.
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: lidarr-http # Unique name for this ingress route
  namespace: media # Must match the namespace of target service
spec:
  # Entry points define which Traefik ports this route listens on
  entryPoints:
    - web # HTTP entry point (port 80)
  # Routes define the matching rules and actions
  routes:
    # Route for custom domain access (replace <YOUR_DOMAIN> with actual domain)
    # Note: Fixed syntax error in original (extra backtick)
    - match: Host(`lidarr.<YOUR_DOMAIN>.sslip.io`)
      kind: Rule # Standard routing rule
      middlewares:
        - name: redirect-https # Apply HTTPS redirect middleware
      services:
        - name: lidarr # Target service name
          port: 8686 # Service port (Lidarr's default)
    # Route for IP-based access (useful for local/development access)
    - match: Host(`lidarr.<YOUR_PUBLIC_IP>.sslip.io`)
      kind: Rule
      middlewares:
        - name: redirect-https # Apply HTTPS redirect middleware
      services:
        - name: lidarr
          port: 8686
---
# =============================================================================
# Lidarr HTTPS Route - Secure Music Management Access
# =============================================================================
# This route handles all HTTPS (port 443) traffic to Lidarr, providing
# secure access to the music collection management interface with automatic SSL certificates.
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: lidarr-https # Unique name for this ingress route
  namespace: media # Must match the namespace of target service
spec:
  # Entry points define which Traefik ports this route listens on
  entryPoints:
    - websecure # HTTPS entry point (port 443)
  # Routes define the matching rules and actions
  routes:
    # Route for custom domain secure access
    - match: Host(`lidarr.<YOUR_DOMAIN>.sslip.io`)
      kind: Rule # Standard routing rule
      middlewares:
        - name: security-headers # Apply security headers middleware
      services:
        - name: lidarr # Target service name
          port: 8686 # Service port for Lidarr
    # Route for IP-based secure access
    - match: Host(`lidarr.<YOUR_PUBLIC_IP>.sslip.io`)
      kind: Rule
      middlewares:
        - name: security-headers # Apply security headers middleware
      services:
        - name: lidarr
          port: 8686
  # TLS configuration for automatic SSL certificate management
  tls:
    certResolver: letsencrypt # Use Let's Encrypt for automatic certificates
