# =============================================================================
# Slskd Ingress Routes - External Access to Soulseek P2P Client
# =============================================================================
# 
# These IngressRoutes provide external web access to the Slskd Soulseek client
# through Traefik. They implement:
# - Automatic HTTPS redirects for security
# - SSL certificate management via Let's Encrypt
# - Security headers for enhanced protection
# - Multiple domain support (IP and custom domains)
# 
# Slskd provides a web-based interface for the Soulseek P2P network, enabling:
# 1. Remote management of downloads and uploads
# 2. Searching the Soulseek network for music files
# 3. Managing shared music libraries
# 4. Monitoring transfer status and statistics
# 
# Note: This only provides access to the web interface. The P2P connections
# for file transfers use a separate port (50300) that bypasses Traefik.
# 
# Documentation:
# - Traefik IngressRoute: https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/
# - Slskd: https://github.com/slskd/slskd
# - Soulseek Network: https://www.slsknet.org/
# =============================================================================
# =============================================================================
# Slskd HTTP Route - Automatic HTTPS Redirect
# =============================================================================
# This route handles all HTTP (port 80) traffic to Slskd and redirects
# it to HTTPS for secure communication. This protects login credentials
# and personal file sharing information.
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: slskd-http # Unique name for this ingress route
  namespace: media # Must match the namespace of target service
spec:
  # Entry points define which Traefik ports this route listens on
  entryPoints:
    - web # HTTP entry point (port 80)
  # Routes define the matching rules and actions
  routes:
    # Route for custom domain access (replace <YOUR_DOMAIN> with actual domain)
    - match: Host(`slskd.<YOUR_DOMAIN>.sslip.io`)
      kind: Rule # Standard routing rule
      middlewares:
        - name: redirect-https # Apply HTTPS redirect middleware
      services:
        - name: slskd # Target service name
          port: 5030 # Service port (Slskd's HTTP interface)
    # Route for IP-based access (useful for local/development access)
    - match: Host(`slskd.<YOUR_PUBLIC_IP>.sslip.io`)
      kind: Rule
      middlewares:
        - name: redirect-https # Apply HTTPS redirect middleware
      services:
        - name: slskd
          port: 5030
---
# =============================================================================
# Slskd HTTPS Route - Secure P2P Client Management Access
# =============================================================================
# This route handles all HTTPS (port 443) traffic to Slskd, providing
# secure access to the Soulseek client interface with automatic SSL certificates.
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: slskd-https # Unique name for this ingress route
  namespace: media # Must match the namespace of target service
spec:
  # Entry points define which Traefik ports this route listens on
  entryPoints:
    - websecure # HTTPS entry point (port 443)
  # Routes define the matching rules and actions
  routes:
    # Route for custom domain secure access
    - match: Host(`slskd.<YOUR_DOMAIN>.sslip.io`)
      kind: Rule # Standard routing rule
      middlewares:
        - name: security-headers # Apply security headers middleware
      services:
        - name: slskd # Target service name
          port: 5030 # Service port for Slskd web interface
    # Route for IP-based secure access
    - match: Host(`slskd.<YOUR_PUBLIC_IP>.sslip.io`)
      kind: Rule
      middlewares:
        - name: security-headers # Apply security headers middleware
      services:
        - name: slskd
          port: 5030
  # TLS configuration for automatic SSL certificate management
  tls:
    certResolver: letsencrypt # Use Let's Encrypt for automatic certificates
