# =============================================================================
# Navidrome Deployment - Modern Music Server and Streamer
# =============================================================================
# 
# Navidrome is a modern music server and streamer that:
# - Provides a web-based music streaming interface
# - Supports Subsonic/Airsonic API for mobile app compatibility
# - Scans and organizes your music library automatically
# - Supports multiple users with individual playlists and preferences
# - Offers features like smart playlists, last.fm scrobbling, and more
# - Compatible with many mobile apps (DSub, Ultrasonic, Play:Sub, etc.)
#
# This acts as your personal Spotify-like service for your own music collection,
# accessible from anywhere with proper network configuration.
#
# Documentation:
# - Navidrome: https://www.navidrome.org/docs/
# - Subsonic API: http://www.subsonic.org/pages/api.jsp
# - Music Streaming: https://en.wikipedia.org/wiki/Music_streaming_service
# =============================================================================
apiVersion: apps/v1 # API version for Deployment resources
kind: Deployment # Resource type - manages a set of identical pods
metadata:
  name: navidrome # Unique name for this deployment
  namespace: media # Namespace for media-related applications
spec:
  # Replica configuration
  replicas: 1 # Single instance (Navidrome doesn't support clustering)
  # Selector defines which pods this deployment manages
  selector:
    matchLabels:
      app: navidrome # Must match the pod template labels below
  # Template defines the pod specification
  template:
    metadata:
      labels:
        app: navidrome # Labels for pod identification and service selection
    spec:
      # Pod-level security context - applies to all containers in the pod
      # See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
      securityContext:
        runAsNonRoot: true # Prevents running as root user (UID 0)
        runAsUser: 1000 # Run as specific non-root user
        runAsGroup: 1000 # Run as specific non-root group
        fsGroup: 1000 # File system group for volume permissions
        seccompProfile: # Secure computing mode profile
          type: RuntimeDefault # Use container runtime's default seccomp profile
      containers:
        - name: navidrome
          # Container image - official Navidrome image
          # Maintained by the Navidrome development team
          image: deluan/navidrome:latest
          # Network ports the container exposes
          ports:
            - containerPort: 4533 # Navidrome web interface and API port
          # Container-level security context - additional security for this specific container
          securityContext:
            allowPrivilegeEscalation: false # Prevents gaining additional privileges
            privileged: false # Disables privileged mode
            readOnlyRootFilesystem: false # Allow writes (needs to write database/cache)
            capabilities: # Linux capabilities management
              drop:
                - ALL # Drop all capabilities for minimal privileges
            runAsNonRoot: true # Enforce non-root execution
            runAsUser: 1000 # Specific user ID
            runAsGroup: 1000 # Specific group ID
          # Environment variables for container configuration
          env:
            - name: PUID # Process User ID - matches runAsUser above
              value: "1000" # Ensures file permissions work correctly
            - name: PGID # Process Group ID - matches runAsGroup above
              value: "1000" # Ensures file permissions work correctly
          # Volume mounts - how storage is attached to the container
          volumeMounts:
            # Navidrome configuration and database storage
            - name: media-storage
              mountPath: /config # Where Navidrome stores its database and settings
              subPath: navidrome/config # Subdirectory within the volume
            # Music library - your music collection for streaming
            # Navidrome will scan this directory for music files
            - name: media-storage
              mountPath: /music # Mount entire music volume (read-only access)
            # Configuration overlay - provides Navidrome settings
            # This mounts only the config file, allowing Navidrome to create other files
            - name: navidrome-config
              mountPath: /config/navidrome.toml # Specific config file mount
              subPath: navidrome.toml # File from ConfigMap
          # Resource limits and requests - controls CPU and memory usage
          # Music streaming can be CPU-intensive for transcoding
          resources:
            requests: # Minimum resources guaranteed
              memory: "128Mi" # 128 megabytes of RAM
              cpu: "50m" # 0.05 CPU cores (50 millicores)
            limits: # Maximum resources allowed
              memory: "512Mi" # 512 megabytes of RAM maximum
              cpu: "500m" # 0.5 CPU cores maximum
          # Health checks - Kubernetes uses these to monitor application health
          # Navidrome provides a /ping endpoint for health checking

          # Liveness probe - checks if the application is running
          # If this fails, Kubernetes will restart the container
          livenessProbe:
            httpGet:
              path: /ping # Navidrome's health check endpoint
              port: 4533 # Web interface port
            initialDelaySeconds: 30 # Wait 30 seconds before first check
            periodSeconds: 10 # Check every 10 seconds
          # Readiness probe - checks if the application is ready to serve traffic
          # If this fails, Kubernetes will stop sending traffic to this pod
          readinessProbe:
            httpGet:
              path: /ping # Navidrome's health check endpoint
              port: 4533 # Web interface port
            initialDelaySeconds: 5 # Wait 5 seconds before first check
            periodSeconds: 5 # Check every 5 seconds
      # Volumes - storage that can be mounted into containers
      volumes:
        # Persistent storage for music files and configuration
        - name: media-storage
          persistentVolumeClaim: # References a PVC for persistent storage
            claimName: media-pvc-auto # Must match PVC name in storage manifests
        # Configuration data from ConfigMap
        - name: navidrome-config
          configMap: # Configuration stored in Kubernetes
            name: navidrome-config # Must match ConfigMap name
            items: # Specific files to mount
              - key: navidrome.toml # Key in ConfigMap
                path: navidrome.toml # Filename in container
