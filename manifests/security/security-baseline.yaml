# =============================================================================
# Security Baseline Configuration Template and Documentation
# =============================================================================
# 
# This file serves as a comprehensive reference for the security hardening
# standards applied across all manifests in this Kubernetes cluster.
# 
# The security configuration implements defense-in-depth principles with
# multiple layers of protection:
# 
# 1. Container Security: Non-root execution, capability dropping, seccomp
# 2. Network Security: Microsegmentation with network policies
# 3. Access Control: RBAC with least privilege principles
# 4. Resource Management: CPU/memory limits and requests
# 5. Policy Enforcement: Pod Security Standards at namespace level
# 6. High Availability: Pod Disruption Budgets for critical services
# 
# This configuration achieves security levels comparable to or better than
# Podman rootless containers while maintaining full Kubernetes functionality.
# 
# Documentation:
# - CIS Kubernetes Benchmark: https://www.cisecurity.org/benchmark/kubernetes
# - NIST Container Security: https://csrc.nist.gov/publications/detail/sp/800-190/final
# - Pod Security Standards: https://kubernetes.io/docs/concepts/security/pod-security-standards/
# =============================================================================

# Standard Pod Security Context Template
# Apply this to all pod specs:
#
# spec:
#   securityContext:
#     runAsNonRoot: true
#     runAsUser: 1000
#     runAsGroup: 1000
#     fsGroup: 1000
#     seccompProfile:
#       type: RuntimeDefault

# Standard Container Security Context Template
# Apply this to all container specs:
#
# securityContext:
#   allowPrivilegeEscalation: false
#   privileged: false
#   readOnlyRootFilesystem: true  # Set to false if app needs write access
#   capabilities:
#     drop:
#       - ALL
#     add: []  # Only add specific capabilities if needed (e.g., NET_BIND_SERVICE)
#   runAsNonRoot: true
#   runAsUser: 1000
#   runAsGroup: 1000

# Resource Limits Template
# Apply appropriate resource limits to all containers:
#
# resources:
#   requests:
#     memory: "128Mi"
#     cpu: "50m"
#   limits:
#     memory: "512Mi"
#     cpu: "500m"

# Health Checks Template
# Add health checks where applicable:
#
# livenessProbe:
#   httpGet:
#     path: /health
#     port: 8080
#   initialDelaySeconds: 30
#   periodSeconds: 10
# readinessProbe:
#   httpGet:
#     path: /ready
#     port: 8080
#   initialDelaySeconds: 5
#   periodSeconds: 5


# Security Standards Applied:
# 
# 1. Non-root execution: All containers run as non-root users
# 2. Capability dropping: All unnecessary Linux capabilities are dropped
# 3. Privilege escalation prevention: allowPrivilegeEscalation set to false
# 4. Seccomp profiles: Runtime default seccomp profiles enabled
# 5. Read-only root filesystem: Enabled where possible
# 6. Resource limits: CPU and memory limits set for all containers
# 7. Network policies: Default deny with explicit allow rules
# 8. Pod Security Standards: Restricted profile enforced at namespace level
# 9. RBAC: Least privilege access for service accounts
# 10. Pod Disruption Budgets: High availability for critical services
